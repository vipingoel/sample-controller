/*
Copyright 2021 The Kubernetes sample-controller Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "sample-controller/pkg/apis/compositioncontroller/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CompositionLister helps list Compositions.
// All objects returned here must be treated as read-only.
type CompositionLister interface {
	// List lists all Compositions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Composition, err error)
	// Compositions returns an object that can list and get Compositions.
	Compositions(namespace string) CompositionNamespaceLister
	CompositionListerExpansion
}

// compositionLister implements the CompositionLister interface.
type compositionLister struct {
	indexer cache.Indexer
}

// NewCompositionLister returns a new CompositionLister.
func NewCompositionLister(indexer cache.Indexer) CompositionLister {
	return &compositionLister{indexer: indexer}
}

// List lists all Compositions in the indexer.
func (s *compositionLister) List(selector labels.Selector) (ret []*v1alpha1.Composition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Composition))
	})
	return ret, err
}

// Compositions returns an object that can list and get Compositions.
func (s *compositionLister) Compositions(namespace string) CompositionNamespaceLister {
	return compositionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CompositionNamespaceLister helps list and get Compositions.
// All objects returned here must be treated as read-only.
type CompositionNamespaceLister interface {
	// List lists all Compositions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Composition, err error)
	// Get retrieves the Composition from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Composition, error)
	CompositionNamespaceListerExpansion
}

// compositionNamespaceLister implements the CompositionNamespaceLister
// interface.
type compositionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Compositions in the indexer for a given namespace.
func (s compositionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Composition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Composition))
	})
	return ret, err
}

// Get retrieves the Composition from the indexer for a given namespace and name.
func (s compositionNamespaceLister) Get(name string) (*v1alpha1.Composition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("composition"), name)
	}
	return obj.(*v1alpha1.Composition), nil
}
